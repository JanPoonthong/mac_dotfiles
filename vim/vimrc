" Disable compatibility with vi which can cause unexpected issues.
set nocompatible

" Enable type file detection. Vim will be able to try to detect the type of file is use.
filetype on

" Enable plugins and load plugin for the detected file type.
filetype plugin on

" Load an indent file for the detected file type.
filetype indent on

" Turn syntax highlighting on.
syntax on

" Add relativenumber to the file.
set relativenumber

" Do not save backup files.
set nobackup

" Do not let cursor scroll below or above N number of lines when scrolling.
set scrolloff=10

" Do not wrap lines. Allow long lines to extend as far as the line goes.
set nowrap

" While searching though a file incrementally highlight matching characters as you type.
set incsearch

" Show partial command you type in the last line of the screen.
set showcmd

" Show the mode you are on the last line.
set showmode

" Show matching words during a search.
set showmatch

" Use highlighting when doing a search.
set hlsearch

" Set the commands to save in history default number is 20.
set history=1000

" Enable auto completion menu after pressing TAB.
set wildmenu

" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx,*/node_modules/**,.git/**,dist/**,build/**

" Ignore matching paren
let g:loaded_matchparen=1

" Turn on mouse
set mouse=a

set shiftwidth=4 et
set tabstop=8
set expandtab
set softtabstop=-1

set list
set listchars=
set listchars+=precedes:<,extends:>
set listchars+=tab:â–¸\ 

set numberwidth=3
set colorcolumn=80,120
set backspace=indent,eol,start

set background=light
colorscheme default


" PLUGINS ---------------------------------------------------------------- {{{

call plug#begin('~/.vim/plugged')

  Plug 'dense-analysis/ale'

  Plug 'preservim/nerdtree'

call plug#end()

" }}}

" MAPPINGS --------------------------------------------------------------- {{{
" Move vim tabs
noremap <Leader><Left>  :tabmove -1<CR>
noremap <Leader><Right> :tabmove +1<CR>

" Filetype
autocmd filetype python map <buffer> <F1> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd filetype c nnoremap <F1> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd filetype cpp nnoremap <F1> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>

" ALE
nmap <silent> <C-j> :ALENext<CR>
nmap <silent> <C-k> :ALEPrevious<CR>

" Custom
nmap , $p
nmap <silent> <unique> <Leader>l :nohlsearch<CR>
noremap <unique> <tab> %

" Have nerdtree ignore certain files and directories.
let NERDTreeIgnore=['\.git$', '\.jpg$', '\.mp4$', '\.ogg$', '\.iso$', '\.pdf$', '\.pyc$', '\.odt$', '\.png$', '\.gif$', '\.db$']

" }}}

" VIMSCRIPT -------------------------------------------------------------- {{{

function! Tabline()
  let s = ''
  for i in range(tabpagenr('$'))
    let tab = i + 1
    let winnr = tabpagewinnr(tab)
    let buflist = tabpagebuflist(tab)
    let bufnr = buflist[winnr - 1]
    let bufname = bufname(bufnr)
    let bufmodified = getbufvar(bufnr, "&mod")

    let s .= '%' . tab . 'T'
    let s .= (tab == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#')
    let s .= ' ' . tab .':'
    let s .= (bufname != '' ? ''. fnamemodify(bufname, ':t') . ' ' : '[No Name] ')

    if bufmodified
      let s .= '[+] '
    endif
  endfor

  let s .= '%#TabLineFill#'
  if (exists("g:tablineclosebutton"))
    let s .= '%=%999XX'
  endif
  return s
endfunction

set tabline=%!Tabline()

function! SearchRipGrep(pattern)
  if empty(a:pattern)
    echo "Error: No search pattern provided."
    return
  endif
  let l:escaped_pattern = shellescape(a:pattern)
  let l:command = 'rg --vimgrep ' . l:escaped_pattern

  let l:results = systemlist(l:command)

  execute 'cgetexpr ' . string(l:results)
  copen 
endfunction

command! -nargs=+ Grep call SearchRipGrep(<q-args>)

function! TogglePaste()
    if(&paste == 0)
        set paste
        echo "Paste Mode Enabled"
    else
        set nopaste
        echo "Paste Mode Disabled"
    endif
endfunction

function! ToggleSpell()
    if(&spell == 0)
        set spell
        echo "Spell Mode Enabled"
    else
        set nospell
        echo "Spell Mode Disabled"
    endif
endfunction

map <F2> :call ToggleSpell()<cr>
map <F3> :call TogglePaste()<cr>

" Vim Tabs
let s:i = 1
while s:i <= 10
  execute printf(
    \ 'nnoremap <unique> <Leader>%d :%dtabnext<CR>',
    \ s:i == 10 ? 0 : s:i,
    \ s:i,
  \ )
  let s:i += 1
endwhile

highlight SpellBad ctermbg=none ctermfg=red cterm=underline

" ForceTab
command Forcetab set autoindent noexpandtab tabstop=4 shiftwidth=4

" If the current file type is HTML, set indentation to 2 spaces.
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 expandtab

" If GUI version of Vim is running set these options.
if has('gui_running')

    " Set the background tone.
    set background=light

    " Set the color scheme.
    colorscheme default

    " Set a custom font you have installed on your computer.
    " Syntax: <font_name>\ <weight>\ <size>
    set guifont=Monospace\ Regular\ 12
endif


" }}}

" STATUS LINE ------------------------------------------------------------ {{{

" Clear status line when vimrc is reloaded.
set statusline=\ \ \ %<%f\ %m "Filename [-]

" Status line left side.
set statusline+=%=%(%l,%c%V%) "Line, col

" Show the status on the second to last line.
set laststatus=2

" }}}

" FZF
if executable('fzf')
    set rtp+=~/.fzf
else
    echo "FZF is not installed or not in PATH."
endif
let g:fzf_layout = { 'down': '30%' }
let current_directory = substitute(getcwd(), $HOME, '~', '') . '/'
let $FZF_DEFAULT_COMMAND = 'fd --type f --hidden --follow --exclude .git --exclude venv --exclude node_modules --exclude ENV'
nmap <silent> <unique> <Leader>b :call fzf#run({'sink': 'tabedit', 'down': '40%', 'options' : '--prompt ' . shellescape(current_directory)})<CR>
nmap <silent> <unique> <C-P> :call fzf#run({'sink': 'edit', 'down': '40%', 'options': '--prompt ' . shellescape(current_directory)})<CR>
autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" Custom
set directory=~/.vim/swap/
" set title
" set titlestring=%t

" Cursor
let &t_SI.="\e[6 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[2 q" "EI = NORMAL mode

" Esc
set esckeys
set notimeout ttimeout ttimeoutlen=0

set exrc secure
